Perfecto. Buscaré APIs gratuitas o con planes free tier que sirvan para MozAIrt en estas áreas: análisis musical desde MIDI/audio, generación y transformación de MIDI con IA, sugerencias estilísticas vía IA, almacenamiento de archivos MIDI y, opcionalmente, extracción legal de fragmentos de audio desde enlaces para análisis. Te compartiré una lista clara con cada opción, condiciones de uso, limitaciones del plan gratuito y enlaces directos para evaluación.

# APIs gratuitas para un proyecto MozAIrt MVP

Para construir un MVP de **MozAIrt** sin inversión inicial, se han identificado diversas herramientas y servicios que ofrecen planes gratuitos (o son open source). A continuación, se listan las opciones recomendadas organizadas por categoría, incluyendo sus funciones, tipo de API/SDK, límites gratuitos, documentación y observaciones relevantes. 

## 1. Análisis musical técnico (MIDI y audio) 

Esta categoría abarca la extracción de **BPM, tonalidad (clave/escala) y estructura** a partir de archivos MIDI, y opcionalmente de fragmentos de audio. Las siguientes opciones son gratuitas u open source:

| **Servicio / Librería**    | **Función principal** | **API o SDK** | **Límite gratuito** | **Documentación** | **Observaciones** |
|---------------------------|-----------------------|---------------|---------------------|-------------------|-------------------|
| **PrettyMIDI** (Python)   | Analiza archivos MIDI y extrae tempo (BPM) estimado y perfil de notas (útil para inferir tonalidad) ([pretty_midi — pretty_midi 0.2.10 documentation](https://craffel.github.io/pretty-midi/#:~:text=midi_data%20%3D%20pretty_midi.PrettyMIDI%28%27example.mid%27%29%20,instruments)). Permite manipular MIDI (transposición, combinar pistas, etc.). | SDK (Python) | N/A (Código abierto, uso libre) | [Docs oficial](https://craffel.github.io/pretty-midi/) ([pretty_midi — pretty_midi 0.2.10 documentation](https://craffel.github.io/pretty-midi/#:~:text=import%20pretty_midi%20,get_chroma)) | Licencia MIT. Muy utilizado en investigación MIR. Requiere programar en Python (ej. integrar en backend). |
| **Music21** (Python)      | Toolkit de musicología computacional que puede determinar la **clave tonal** de una pieza MIDI (usa algoritmo de Krumhansl-Schmuckler) ([music21.stream.base](https://www.music21.org/music21docs/moduleReference/moduleStreamBase.html#:~:text=Runs%20a%20particular%20analytical%20method,key%20%E2%80%93%20runs%20KrumhanslSchmuckler)), identificar acordes, rango melódico, etc. | SDK (Python) | N/A (Open source) | [Music21 doc](http://web.mit.edu/music21/) | Licencia BSD. Comunidad académica activa. Útil para análisis teórico más profundo (puede ser más lento en archivos grandes). |
| **Magenta NoteSequences** (Google) | Convierte MIDI a **NoteSequence** (estructura interna) para facilitar análisis y visualización. Forma parte de Magenta, incluye utilidades para obtener información básica (p.ej. contenidos de notas, compás). | SDK (JavaScript/Node o Python) | N/A (Open source) | [Magenta JS API](https://magenta.github.io/magenta-js/music/) ([@magenta/music - v1.23.1](https://magenta.github.io/magenta-js/music/#:~:text=This%20JavaScript%20implementation%20of%20Magenta%27s,see%20the%20main%20Magenta%20repo)) | Licencia Apache 2.0. Integración en JS (browser/Node) o Python. Puede complementarse con modelos Magenta (ver sección generación). |
| **Librosa** (Python)      | Biblioteca de *audio analysis*. Permite estimar tempo a partir de audio (beat tracking) y extraer features como espectro, chroma, etc., que ayudan a inferir tonalidad ([Detecting Musical Key from Audio Using Chroma Feature in Python](https://medium.com/@oluyaled/detecting-musical-key-from-audio-using-chroma-feature-in-python-72850c0ae4b1#:~:text=In%20this%20article%2C%20we%20will,key%20from%20an%20audio%20file)). Útil si se analiza un fragmento WAV/MP3 en memoria. | SDK (Python) | N/A (Open source) | [Librosa doc](https://librosa.org/) | Licencia ISC/MIT. Ampliamente usada en *Music Information Retrieval*. Para detección de clave musical se suele complementar con algoritmos externos. |
| **Essentia** (Audio análisis) | Plataforma de MIR que extrae BPM, clave (mayor/menor) y más de audio. Incluye algoritmos state-of-art (e.g. tempo de Dixon 2001) ([pretty_midi — pretty_midi 0.2.10 documentation](https://craffel.github.io/pretty-midi/#:~:text=%E2%80%9CAutomatic%20Extraction%20of%20Tempo%20and,from%20Expressive%20Performance%E2%80%9D%2C%20Dixon%202001)). | SDK (C++ con bindings Python) | N/A (Open source) | [Essentia docs](https://essentia.upf.edu/documentation/) | Licencia AGPLv3 (requiere divulgar código si se usa en servidor público). Muy potente (utilizado en AcousticBrainz), aunque su integración es más compleja. |
| **Spotify Web API** (Audio Features) | *(Caso especial)* Permite obtener características de **canciones conocidas** en Spotify: incluye tempo (BPM), tonalidad y modo (mayor/menor) ([Amazon S3 - Cloud Object Storage - AWS](https://aws.amazon.com/s3/#:~:text=Amazon%20S3%20,2%2C000%20PUT%2C%20COPY%2C%20POST%2C)), duración, etc. Útil si el usuario proporciona un **track popular** como referencia estilística. | REST API (OAuth) | Gratis (necesario registro dev, [límite ~25 req/seg](https://developer.spotify.com/documentation/web-api/)) | [Audio Features](https://developer.spotify.com/documentation/web-api/reference/get-audio-features) | Solo aplica a canciones del catálogo de Spotify (no analiza archivos del usuario). Free tier con límites de tasa razonables. |

## 2. Generación y procesamiento de archivos MIDI con IA 

En esta categoría se buscan herramientas de **IA generativa musical** para transformar o crear melodías MIDI estilizadas a partir de una entrada (e.g. aplicar el estilo de un género o artista). Opciones gratuitas o con free tier:

| **Servicio / Herramienta** | **Función principal** | **API o SDK** | **Límite gratuito** | **Documentación** | **Observaciones** |
|---------------------------|-----------------------|---------------|---------------------|-------------------|-------------------|
| **Google Magenta** (Magenta.js / Magenta Studio) | Plataforma open source con múltiples modelos para **generar o transformar MIDI**. Ejemplos: *Continue* extiende una melodía MIDI cargada usando Music Transformer ([3 Best AI Music Generators for MIDI Creation – MIDI.org](https://midi.org/3-best-ai-music-generators-for-midi-creation#:~:text=,collection%20to%20a%20%E2%80%98random%20note)), *Interpolate* genera transiciones entre dos melodías ([3 Best AI Music Generators for MIDI Creation – MIDI.org](https://midi.org/3-best-ai-music-generators-for-midi-creation#:~:text=the%20rhythm%20slightly%2C%20giving%20it,Magenta%20composes%20a%20melody%20that)), *Drumify* añade ritmo a una melodía, etc. También incluye modelos RNN y VAE para crear nuevas melodías y grooves. | SDK (TensorFlow.js o Python) | N/A (Código abierto) | [Magenta repo](https://github.com/magenta/magenta) ([@magenta/music - v1.23.1](https://magenta.github.io/magenta-js/music/#:~:text=This%20JavaScript%20implementation%20of%20Magenta%27s,see%20the%20main%20Magenta%20repo)) | Licencia Apache 2.0. Puede ejecutarse localmente (en backend Python o en navegador). La suite Magenta Studio es gratuita ([3 Best AI Music Generators for MIDI Creation – MIDI.org](https://midi.org/3-best-ai-music-generators-for-midi-creation#:~:text=Google%C2%A0Magenta%20is%C2%A0a%20hub%20for%20music,overview%20of%20how%20they%20work)) e incluye 5 apps independientes. Comunidad amplia y activa en investigación musical. |
| **AIVA** (Artificial Intelligence Virtual Artist) | Servicio web de composición AI que genera piezas musicales en diversos **estilos predefinidos**. Permite subir un archivo MIDI o audio de referencia para guiar la composición ([AIVA, the AI Music Generation Assistant](https://www.aiva.ai/#:~:text=Ultimate%20customizability)). Devuelve un MIDI y audio (MP3). | Aplicación Web (GUI); API REST privada solo para socios | Free **“Forever”** plan: 3 pistas/mes de hasta 3 min ([AIVA, the AI Music Generation Assistant](https://www.aiva.ai/#:~:text=,Download%20MP3%20%26%20MIDI%20formats)) (MIDI+MP3). | [AIVA Docs](https://www.aiva.ai/) | En el plan gratuito la música generada es **no comercial** (copyright de AIVA, se requiere atribución) ([AIVA, the AI Music Generation Assistant](https://www.aiva.ai/#:~:text=,Download%20MP3%20%26%20MIDI%20formats)). Planes de pago otorgan derechos completos. No dispone de API pública abierta; la integración sería manual (descarga de resultados vía web). |
| **HuggingFace + Modelos MIDI** | (*Opción autogestionada*) Repositorio de modelos abiertos entrenados para generación musical (ej. Transformer GPT para MIDI). Se pueden utilizar vía API de HuggingFace o ejecutarlos localmente. | REST API (Inference) o SDK (Python) | Comunidad: free tier limitada (inference API rate-limit), código abierto sin límites localmente. | [HuggingFace Models](https://huggingface.co/models?search=midi) | Hay modelos como `GPT2Midi` o implementaciones de *Music Transformer*. Uso mediante API comunitaria puede tener cola o requerir su propio host. Requiere conocimientos para ajustar/promptear el modelo al estilo deseado. |

*Nota:* OpenAI **MuseNet** (2019) fue un modelo notable de generación de MIDI en estilos (Mozart, Beatles, EDM, etc.), pero ya no está disponible públicamente ([AI MIDI Generator: Your Ultimate Guide for 2025](https://blog.staccato.ai/en-US/leading-ai-midi-tools-2023#:~:text=While%20Musenet%20is%20no%20longer,widespread%20popularity%20during%20its%20availability)). Las opciones actuales se enfocan en Magenta y servicios como AIVA.

## 3. Sugerencias estilísticas (IA generativa de texto)

Para generar descripciones estilísticas, instrucciones de modificación de la melodía o presets en formato JSON, se emplean **modelos de lenguaje (LLM)**. Estos pueden recibir prompts estructurados (p. ej. descripción del género, elementos musicales) y devolver texto con recomendaciones. Opciones con plan gratuito:

| **Servicio (Modelo)**      | **Función** | **API/SDK** | **Límite gratuito** | **Documentación**            | **Observaciones**          |
|----------------------------|-------------|-------------|---------------------|-----------------------------|----------------------------|
| **OpenAI ChatGPT API** (GPT-3.5) | Modelo de lenguaje general para generación de texto o JSON. Útil para describir ajustes estilísticos a la melodía (p.ej. “añadir arpegios tipo trance”) y proponer cambios. | REST API (OpenAI) | *No tiene tier gratis permanente* (nuevo registro incluye crédito inicial ~$5). Coste bajo: ~$0.002 / 1K tokens (gpt-3.5-turbo). | [OpenAI API docs](https://platform.openai.com/docs/) | Modelo de alta calidad en comprensión de indicaciones. Se puede delimitar salida en JSON. Requiere clave API; después del crédito inicial el uso es pago por consumo (pero económico para MVP). |
| **Anthropic Claude** (Claude Instant 1.2) | Modelo tipo ChatGPT enfocado en entregas útiles y estructuradas. Puede devolver instrucciones detalladas o listas JSON de parámetros estilísticos. | REST API | **Gratis limitado**: hasta ~$10 USD de uso al mes en el tier de prueba ([Anthropic Claude API: A Practical Guide](https://www.acorn.io/resources/learning-center/claude-api/#:~:text=,5%2C000%20of%20usage%20per%20month)) (aprox. 2 millones de tokens de salida). | [Claude API](https://docs.anthropic.com/claude) | Contexto muy amplio (hasta 100k tokens) ideal si se le suministra mucho texto (ej. letra, descripción extensa). Se requiere solicitar acceso (Anthropic). |
| **Cohere** (Command model) | LLM enfocado a empresas, también genera texto creativo o estructurado. Puede producir descripciones de estilo musical o listas de cambios en formato natural. | REST API (hay SDK para varios lenguajes) | **Free tier** para prototipos (acceso a todos los endpoints con rate limit) ([Cohere AI: Models, Pricing, and Quick API Tutorial](https://www.acorn.io/resources/learning-center/cohere-ai/#:~:text=%2A%20Free%20Tier%3A%20Provides%20rate,to%20deploy%20hosted%20language%20models)). Uso gratuito hasta pasar a producción. | [Cohere Docs](https://docs.cohere.com/) | Fácil de usar con SDK. Menos entrenado en español que GPT-3.5 (aunque soporta español). Comunidad Discord activa. Tras prototipo, pricing por tokens (similar a OpenAI). |
| **Mistral 7B** (Open Source) | Modelo de lenguaje abierto (7B parámetros). Puede ejecutarse localmente o vía plataformas comunitarias. Útil si se busca evitar costes completamente. | SDK local (p. ej. vía Transformers) o API vía terceros | N/A (Modelo **Apache 2.0**, uso libre sin restricciones) ([Mistral 7B](https://mistral.ai/news/announcing-mistral-7b#:~:text=We%27re%20releasing%20Mistral%207B%20under,including%20locally%29)). *Hosts* como **OpenRouter** ofrecen acceso gratuito con compatibilidad OpenAI API. | [Mistral AI anuncio](https://mistral.ai) | Al ser ligero, puede auto-hospedarse en una GPU modesta. La calidad es menor que GPT-3.5, pero suficiente para sugerencias básicas. Servicios como **OpenRouter** permiten usarlo gratis vía llamada REST estándar ([OpenRouter](https://openrouter.ai/mistralai/mistral-7b-instruct:free#:~:text=OpenRouter%20provides%20an%20OpenAI,party%20SDKs%20are%20available)). |

## 4. Hosting/almacenamiento de archivos MIDI 

Para almacenar los archivos MIDI del usuario (subidos y generados) se recomiendan servicios de **object storage** con API, idealmente con un nivel gratuito generoso. Los MIDI son livianos en tamaño, por lo que incluso las opciones gratuitas suelen ser suficientes en fase MVP:

| **Servicio**       | **Función** | **API/SDK** | **Free Tier** | **Documentación**                  | **Observaciones**              |
|--------------------|-------------|-------------|--------------|------------------------------------|-------------------------------|
| **AWS S3** (Amazon)        | Almacenamiento de objetos robusto (integración estándar). Ideal para subir MIDI y luego obtener URL de descarga. | REST API S3 (HTTP) o SDKs oficiales (multi lenguaje) | **Free 12 meses:** 5 GB de almacenamiento estándar, 20k GET y 2k PUT mensuales, 100 GB transferencia/mes ([Amazon S3 Pricing - Cloud Object Storage - AWS](https://aws.amazon.com/s3/pricing/#:~:text=Upon%20sign,Data%20Transfer%20Out%20each%20month)). | [AWS S3 Docs](https://aws.amazon.com/s3/) | Requiere registro AWS. Tras 12 meses, se cobra bajo demanda. Amplio soporte SDK. Permite control de acceso (links presignados, etc.). |
| **Vercel Blob**    | Storage nativo de Vercel para proyectos frontend/backend. Permite guardar blobs (archivos estáticos como MIDI) con URLs únicas. | API HTTP (endpoints PUT/GET) integrable con apps en Vercel. | **Beta Free (Hobby)**: 250 MB almacenamiento, 5 GB transferencia/mes ([Vercel Blob Pricing](https://vercel.com/docs/storage/vercel-blob/usage-and-pricing#:~:text=,additional%20charge%20while%20in%20Beta)); 100k operaciones básicas (GET) al mes. | [Blob docs](https://vercel.com/docs/storage/vercel-blob) | Actualmente en beta (no cobra excedentes durante beta) ([Vercel Blob Pricing](https://vercel.com/docs/storage/vercel-blob/usage-and-pricing#:~:text=Vercel%20Blob%20is%20currently%20available,the%20project%20is%20in%20Beta)). Muy fácil de usar si el backend está en Vercel. En free (Hobby) se pausa el servicio si se excede el límite, reanudando el siguiente mes ([Vercel Blob Pricing](https://vercel.com/docs/storage/vercel-blob/usage-and-pricing#:~:text=Hobby)). |
| **Cloudinary**     | Plataforma de almacenamiento y procesamiento de media. Puede almacenar archivos MIDI (aunque orientada a imágenes/videos). Ofrece CDN para entrega rápida. | API REST robusta (upload, download) + SDKs (Node, Python, etc.). | **Free plan perpetuo:** 25 créditos/mes (≈ *25 GB de storage* o *25k transformaciones* o *25 GB de transferencia*, combinados) ([Compare Plans | Cloudinary](https://cloudinary.com/pricing/compare-plans#:~:text=1%20Credit%20equals%201000%20transformations,Calculate%20credits)). | [Cloudinary API](https://cloudinary.com/documentation) | Generoso plan gratuito ([Cloudinary - Pricing and Plans](https://cloudinary.com/pricing#:~:text=3%20Users%20%2F%201%20Account,25%20monthly%20credits)) ([Compare Plans | Cloudinary](https://cloudinary.com/pricing/compare-plans#:~:text=1%20Credit%20equals%201000%20transformations,Calculate%20credits)) sin caducidad. Requiere crear cuenta (sin tarjeta). Soporta transformar media, pero para MIDI se usaría solo almacenamiento bruto. |
| **Cloudflare R2**  | Object storage compatible S3, **sin coste de egress** (descarga). Adecuado si se espera muchas descargas de los MIDI generados. | API S3-compatible (HTTP) | **Free tier:** 10 GB almacenamiento, 1 million operaciones escritura, 10 million lectura por mes ([Cloudflare R2 Pricing: Which Plan is Best for You? - ThemeDev](https://themedev.net/blog/cloudflare-r2-pricing?srsltid=AfmBOoqSPy5VnWeCBKLPJ_juXAoDPgkWp8cBDz94ZGnNkkl5ui-Gb378#:~:text=Free%20Tier%20Benefits,1%20million%20Class%20A)). | [R2 Docs](https://developers.cloudflare.com/r2/) | Siempre sin fees por salida (único en mercado). Límite gratis suficiente para MVP. Requiere cuenta Cloudflare (plan free). S3-compatible: se puede usar con librerías S3 estándar. |
| **Supabase Storage** | Almacenamiento de archivos integrado con Supabase (Baas sobre PostgreSQL). Útil si ya se usa Supabase para la base de datos/usuario. | API REST (vía supabase JS/py SDK) | **Free:** 1 GB almacenamiento, ~2 GB transferencia/mes ([Is there any bandwidth restrictions here using Supabase's storage? | Hacker News](https://news.ycombinator.com/item?id=26635641#:~:text=TLDR%3A%20for%20the%20free%20tier,it%27s%20Pay%20as%20you%20Go)). | [Supabase Storage docs](https://supabase.com/docs/guides/storage) | Incluido en el plan gratuito de Supabase junto a la base de datos y auth ([Pricing & Fees - Supabase](https://supabase.com/pricing#:~:text=Free%20%C2%B7%20Unlimited%20API%20requests,file%20storage%20%C2%B7%20Community%20support)). Conveniente si se centraliza todo en Supabase. No cobra excedentes en free (pero puede pausar servicio). |

## 5. (Opcional) Extracción de fragmentos de audio desde URLs 

Aunque MozAIrt trabajará principalmente con MIDI, puede surgir la necesidad de **analizar temporalmente un audio de referencia online** (por ej., un link de YouTube o SoundCloud proporcionado por el usuario para inferir BPM/tono). Para cumplir condiciones legales, se debe evitar almacenar permanentemente ese audio (solo procesarlo en memoria). Opciones:

| **Herramienta/Servicio**  | **Función** | **API/SDK** | **Límite gratuito** | **Documentación** | **Observaciones** |
|---------------------------|-------------|-------------|---------------------|-------------------|-------------------|
| **yt-dlp** (YouTube-DL fork) + FFmpeg | Herramienta open source para descargar/extraer audio de videos de **YouTube, SoundCloud y miles de sitios** soportados ([yt-dlp(1) — Arch manual pages](https://man.archlinux.org/man/yt-dlp.1#:~:text=yt,dlc)). Se puede invocar desde Python/Node para obtener el audio en memoria o archivo temporal. Con **FFmpeg** se recorta el fragmento deseado (ej. primeros 30s) sin guardar el resto. | Librería CLI/SDK (Python) | N/A (gratuito, licencia Unlicense) | [yt-dlp GitHub](https://github.com/yt-dlp/yt-dlp) | No es una API oficial, sino una utilidad de línea de comando muy utilizada. Requiere instalar `yt-dlp` y `ffmpeg`. **Importante**: Usar solo para análisis temporal (cumplir fair use); no redistribuir audio descargado. |
| **SoundCloud API** (oficial) | (*Alternativa*) API para obtener **streams de audio** de SoundCloud. Dado el URL de un track público, permite resolver un **playback URL** (MP3/HLS) si la pista lo permite. | REST API (OAuth con client_id) | Gratis con registro de app (ratas limitadas, p.ej. ~15k plays al día historically). | [SoundCloud API Guide](https://developers.soundcloud.com/) | SoundCloud ha restringido el registro de nuevas apps recientemente ([Not sure if this violates terms of service for Soundcloud - Reddit](https://www.reddit.com/r/learnprogramming/comments/spiefo/not_sure_if_this_violates_terms_of_service_for/#:~:text=Not%20sure%20if%20this%20violates,about%202%20years%20ago)), por lo que obtener una API key puede requerir contacto con soporte. En caso de acceso, solo se pueden extraer pistas marcadas como públicas/streamables por sus autores. |

**Nota:** En muchos casos, utilizar **yt-dlp** es la solución más práctica, dado que soporta YouTube (donde probablemente esté la referencia) y también SoundCloud, evitando depender de múltiples APIs. Solo se debe asegurar que el uso sea para análisis interno (por ejemplo, extraer BPM/tono con libros como Librosa) y no se almacene ni comparta el audio para no infringir términos de servicio.

---

**Referencias:** Las referencias citadas 【】 corresponden a documentación oficial o fuentes relevantes que respaldan los datos proporcionados. Cada opción listada fue seleccionada por su **plan gratuito generoso o naturaleza open source**, pensando en minimizar costos al lanzar el MVP de MozAIrt. En conjunto, estas herramientas cubrirán el flujo completo: análisis musical técnico, generación asistida por IA, recomendaciones estilísticas por IA de texto, almacenamiento de los MIDI resultantes, y (si es necesario) análisis puntual de audio de referencia, todo sin incurrir en gastos iniciales.  ([Amazon S3 Pricing - Cloud Object Storage - AWS](https://aws.amazon.com/s3/pricing/#:~:text=Upon%20sign,Data%20Transfer%20Out%20each%20month))